Order: Tuples maintain the order of elements.

Immutable: Once created, tuples cannot be modified.

Fixed size: The number of elements in a tuple is fixed, and new elements cannot be added or removed.

Indexed: Each element in a tuple has an index that can be used to access it.

Heterogeneous: A tuple can contain elements of different data types.

In conclusion, Yes, tuples are immutable.


------------------------------------------------------------

count(): This method returns the number of occurrences of a specified element in a tuple.
Example: t = (10, 20, 30, 10, 20, 30)
print(t.count(10))
output:  2
index(): This method returns the index of the first occurrence of a specified element in a tuple.
Example: t = (10, 20, 30, 10, 20, 30)
         print(t.index(10))
output: 0

Tuples have only two in-built methods compared to Lists because tuples are designed to be simple and efficient data structures. Lists have many methods because they are meant to be used for more complex operations that require more functionalities. Tuples, on the other hand, are intended to be used as basic building blocks for data structures and are used primarily for indexing and accessing elements.

----------------------------------------------------------------------------

Sets are the built-in data type that do not allow duplicate items.

List = [1, 1, 1, 2, 1, 3, 1, 4, 2, 1, 2, 2, 2, 3, 2, 4, 3, 1, 3, 2, 3, 3, 3, 4, 4, 1, 4, 2, 4, 3, 4, 4] 
this_set=set(List)
this_List=list(this_set)
print(this_List)

output:
[1, 2, 3, 4]

------------------------------------------------------------------------------
The union() method is used to combine the elements of two or more sets and return a new set that contains all elements from both sets, without any duplicates.

The update() method is used to add the elements of one set to another set. It modifies the original set by adding all elements from another set to it, without any duplicates.

union:
set1 = {7, 8, 10}
set2 = {17, 18, 19}

set3 = set1.union(set2)
print(set3)

output=> {17, 18, 19, 7, 8, 10}

update:
set1.update(set2)
print(set1)

output=> {17, 18, 19, 7, 8, 10}

------------------------------------------------------------------------------

A dictionary is a collection of key-value pairs, where each key is unique and maps to a corresponding value. In programming, dictionaries are commonly used for fast and efficient lookups, where the key is used to search for the value.

example:

emp_id = {
  'Misro': '22678678',
  'krishna': '673783867',
  'arjun': '67654478'
}

emp_id['Misro']

output=> '22678678'

In Python, dictionaries are unordered, meaning the items have no defined order. The order of items in a dictionary may change during the lifetime of the dictionary, but this doesn't affect the ability to access the values by their keys.

-------------------------------------------------------------------------------------

Yes, you can create a nested dictionary in Python. A nested dictionary is a dictionary that contains another dictionary as its value. Here's an example of a simple one-level nested dictionary:

person = {
  'name': 'virat kohli',
  'address': {
    'street': '18 Main St',
    'city': 'Thane',
    'state': 'Mumbai',
    'zip': '12345'
  }
}

print(person['address']['city'])

output=> Thane

--------------------------------------------------------------------------------------

 setdefault() method can be used to add a new key-value pair to a dictionary, or to update the value for an existing key. If the specified key does not exist in the dictionary, a new key-value pair will be added. If the key already exists, its value will be updated. Here's how you can use setdefault() to create the 'topics' key in the dict1 dictionary

dict1 = {'language' : 'Python', 'course': 'Data Science Masters'}
dict1.setdefault('topics', ['Python', 'Machine Learning', 'Deep Learning'])
print(dict1)

output=> {'language': 'Python', 'course': 'Data Science Masters', 'topics': ['Python', 'Machine Learning', 'Deep Learning']}

----------------------------------------------------------------------------------------

In Python, dictionaries have three view objects: keys(), values(), and items(). These methods return a view of the dictionary's keys, values, and key-value pairs, respectively. Here's how you can use these methods to display the view objects for the given dict1 dictionary:

dict1 = {'Sport': 'Cricket' , 'Teams': ['India', 'Australia', 'England', 'South Africa', 'Sri Lanka', 'New Zealand']}

# Display the keys
print(dict1.keys()) # Output: dict_keys(['Sport', 'Teams'])

# Display the values
print(dict1.values()) # Output: dict_values(['Cricket', ['India', 'Australia', 'England', 'South Africa', 'Sri Lanka', 'New Zealand']])

# Display the key-value pairs
print(dict1.items()) # Output: dict_items([('Sport', 'Cricket'), ('Teams', ['India', 'Australia', 'England', 'South Africa', 'Sri Lanka', 'New Zealand'])])

-------------------------------------------------------------------------------------------------